// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

/// Sui 物件識別碼
module sui::object {
    use std::bcs;
    use sui::tx_context::{Self, TxContext};

    friend sui::dynamic_field;
    friend sui::dynamic_object_field;
    friend sui::sui_system;
    friend sui::transfer;

    #[test_only]
    friend sui::test_scenario;

    /// 單例 Sui 系統狀態物件的硬編碼 ID。
    const SUI_SYSTEM_STATE_OBJECT_ID: address = @0x5;

    /// 當提供的字節過多或過少時，來自 `address_from_bytes` 的錯誤
    const EAddressParseError: u64 = 0;

    /// 物件 ID。 這用於引用 Sui 物件。
    /// *不*保證全局唯一——任何人都可以從“UID”或物件創建“ID”，並且可以自由複制和刪除 ID。
    /// 在這裡，這些值不是全局唯一的，因為可以有多個具有相同底層字節的“ID”類型的值。
    /// 例如，對於給定的 `obj`，`object::id(&obj)` 可以被多次調用，並且每個 `ID` 值都是相同的。
    struct ID has copy, drop, store {
        bytes: address
        // 我們在這裡使用 `address` 而不是 `vector<u8>` 因為 `address` 具有更緊湊的序列化。
        // `address` 被序列化為 BCS 固定長度序列，這為我們節省了如果這是 `vector<u8>` 時我們將支付的長度前綴。
        // 請參閱 https://github.com/diem/bcs#fixed-and-variable-length-sequences。
    }

    /// 定義存儲中物件 ID 的全局唯一 ID。 任何 Sui 物件，即具有 `key` 能力的結構，必須將 `id: UID` 作為其第一個字段。
    /// 這些是全局唯一的，因為沒有兩個 `UID` 類型的值永遠相等，換句話說，對於任何兩個值 `id1: UID` 和 `id2: UID`，`id1` != `id2`。
    /// 這是一種特權類型，只能從 `TxContext` 導出。
    /// `UID` 沒有 `drop` 能力，因此刪除 `UID` 需要調用 `delete`。
    struct UID has store {
        id: ID,
    }

    // === 地址 ===

    /// 將原始字節轉換為地址，如果提供的字節過多或過少則中止。
    public native fun address_from_bytes(bytes: vector<u8>): address;

    // === id ===

    /// 獲取“ID”的原始字節
    public fun id_to_bytes(id: &ID): vector<u8> {
        bcs::to_bytes(&id.bytes)
    }

    /// 獲取 `id` 的內部字節作為地址。
    public fun id_to_address(id: &ID): address {
        id.bytes
    }

    /// 從原始字節製作一個“ID”。
    public fun id_from_bytes(bytes: vector<u8>): ID {
        id_from_address(address_from_bytes(bytes))
    }

    /// 從地址製作一個“ID”。
    public fun id_from_address(bytes: address): ID {
        ID { bytes }
    }

    // === uid ===

    /// 為單例 `SuiSystemState` 物件創建 `UID`。
    /// 這只能從 `sui_system` 調用一次。
    public(friend) fun sui_system_state(): UID {
        UID {
            id: ID { bytes: SUI_SYSTEM_STATE_OBJECT_ID },
        }
    }

    /// 獲取 `uid` 的內部 `ID`
    public fun uid_as_inner(uid: &UID): &ID {
        &uid.id
    }

    /// 獲取 `uid` 的內部 `ID` 的原始字節
    public fun uid_to_inner(uid: &UID): ID {
        uid.id
    }

    /// 獲取 `UID` 的原始字節
    public fun uid_to_bytes(uid: &UID): vector<u8> {
        bcs::to_bytes(&uid.id.bytes)
    }

    /// 獲取 `id` 的內部字節作為地址。
    public fun uid_to_address(uid: &UID): address {
        uid.id.bytes
    }

    // === 任何物件 ===

    /// 創建一個新物件。 返回必須存儲在 Sui 物件中的“UID”。
    /// 這是創建 `UID` 的唯一方法。
    public fun new(ctx: &mut TxContext): UID {
        UID {
            id: ID { bytes: tx_context::new_object(ctx) },
        }
    }

    /// 刪除物件，它是 `UID`。 這是消除“UID”的唯一方法。
    // 這是為了通知 Sui 物件刪除。 當一個物件被解包時，程序員將不得不對其 `UID` 做一些事情。 該函數的實現會發出一個已刪除的系統事件，以便 Sui 知道處理物件刪除。
    public fun delete(id: UID) {
        let UID { id: ID { bytes } } = id;
        delete_impl(bytes)
    }

    /// 獲取`obj`的底層`ID`
    public fun id<T: key>(obj: &T): ID {
        borrow_uid(obj).id
    }

    /// 借用`obj`的底層`ID`
    public fun borrow_id<T: key>(obj: &T): &ID {
        &borrow_uid(obj).id
    }

    /// 獲取 `obj` 的底層 `ID` 的原始字節
    public fun id_bytes<T: key>(obj: &T): vector<u8> {
        bcs::to_bytes(&borrow_uid(obj).id)
    }

    /// 獲取 `obj` 的底層 `ID` 的內部字節
    public fun id_address<T: key>(obj: &T): address {
        borrow_uid(obj).id.bytes
    }

    /// 獲取 `obj` 的 `UID`。
    /// 安全，因為 Sui 有一個額外的字節碼驗證程序，它強制每個具有 `key` 能力的結構具有一個可區分的 `UID` 字段。
    /// 不能公開，因為對給定物件的“UID”的訪問必須是特權的，並且在物件的模塊中是可限制的。
    native fun borrow_uid<T: key>(obj: &T): &UID;

    /// 生成專門用於從哈希值創建 UID 的新 UID
    public(friend) fun new_uid_from_hash(bytes: address): UID {
        record_new_uid(bytes);
        UID { id: ID { bytes } }
    }

    // === 內部函數 ===

    // 刪除助手
    native fun delete_impl(id: address);

    // 從哈希值標記新創建 UID
    native fun record_new_uid(id: address);

    // 校準功能
    #[test_only]
    public fun calibrate_address_from_bytes(bytes: vector<u8>) {
        address_from_bytes(bytes);
    }
    #[test_only]
    public fun calibrate_address_from_bytes_nop(bytes: vector<u8>) {
        let _ = bytes;
    }

    #[test_only]
    public fun calibrate_borrow_uid<T: key>(obj: &T) {
        borrow_uid(obj);
    }
    #[test_only]
    public fun calibrate_borrow_uid_nop<T: key>(obj: &T) {
        let _ = obj;
    }

    // 待定

    // #[test_only]
    // public fun calibrate_delete_impl(id: UID) {
    //     delete_impl(id);
    // }
    // #[test_only]
    // public fun calibrate_delete_impl(_id: UID) {
    // }

    #[test_only]
    /// Return the most recent created object ID.
    public fun last_created(ctx: &TxContext): ID {
        ID { bytes: tx_context::last_created_object_id(ctx) }
    }
}
